/******************************************************************************
 * Copyright (c) 2016 Leandro T. C. Melo (ltcmelo@gmail.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
 * USA
 *****************************************************************************/

#ifndef PSYCHE_ASTDUMPER_H__
#define PSYCHE_ASTDUMPER_H__

#include "AST.h"
#include "ASTVisitor.h"
#include <fstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

// I'm placing this inside the CPlusPlus namespace because the dumpers I
// extracted from Qt Creator's code rely on it.
namespace CPlusPlus {

/*!
 * \brief The Dumper class
 *
 * This is an adaptation of Qt Creator's ASTDump class in which all Qt-specific
 * types have been replaced by their corresponding C++ standard lib's types
 * and few improvements have been made.
 */
class Dumper: protected CPlusPlus::ASTVisitor
{
public:
    Dumper(CPlusPlus::TranslationUnit *unit)
        : ASTVisitor(unit)
        , os_(nullptr)
        , count_(1)
    {}

    void dump(CPlusPlus::AST *ast, const std::string& fileSuffix);
    void dump(CPlusPlus::AST *ast, const std::string& fileSuffix, std::ostream& os);

    // AST node dumpers are generated by $cplusplus-update-frontend <frontend-dir> <dumpers-file>
    // in Qt Creator, but we cannot introduce all that infrastructure into our
    // project. So when we add/change AST nodes we must make the necessary
    // adjustments to this file.
    #include "ASTNodeDumpers.inc"

protected:
    void alignTerminals();

    static std::string name(AST *ast);

    std::string terminalId(unsigned token);

    void terminal(unsigned token, AST *node);

    void generateTokens();

    void nonterminal(AST *ast);
    void node(AST *ast);

    bool preVisit(AST *ast) override;
    void postVisit(AST *) override;

private:
    std::unordered_map<CPlusPlus::AST *, std::string> id_;
    std::vector<std::pair<std::string, std::string>> connections_;
    std::stack<CPlusPlus::AST *> nodes_;
    std::vector<std::string> terminalShapes_;
    std::ostream* os_;
    int count_;
};

}

#endif
